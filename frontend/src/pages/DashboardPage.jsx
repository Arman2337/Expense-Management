import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import { expenseService } from '../services/expenseService';
import { dashboardService } from '../services/dashboardService';
import ApprovalModal from '../components/ApprovalModal';
import { DollarSign, TrendingUp, Clock, CheckCircle, XCircle, AlertCircle, Users } from 'lucide-react';

// A generic loader component
const Loader = () => (
Â  Â  <div className="flex items-center justify-center h-64">
Â  Â  Â  Â  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
Â  Â  </div>
);

// A reusable Stat Card Component
const StatCard = ({ title, value, icon: Icon, color, trend }) => (
    <div className="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-shadow duration-300">
        <div className="flex items-center justify-between">
            <div>
                <p className="text-sm font-medium text-gray-600 mb-1">{title}</p>
                <h3 className="text-3xl font-bold text-gray-800">{value}</h3>
                {trend && (
                    <p className="text-sm text-green-600 mt-2 flex items-center gap-1">
                        <TrendingUp className="w-4 h-4" />
                        {trend}
                    </p>
                )}
            </div>
            <div className={`${color} p-4 rounded-full`}>
                <Icon className="w-8 h-8 text-white" />
            </div>
        </div>
    </div>
);

// --- Role-Specific Dashboards ---

const EmployeeDashboard = () => {
Â  Â  const [stats, setStats] = useState(null);
Â  Â  const [isLoading, setIsLoading] = useState(true);

Â  Â  useEffect(() => {
Â  Â  Â  Â  dashboardService.getStats('employee')
Â  Â  Â  Â  Â  Â  .then(response => setStats(response.data))
Â  Â  Â  Â  Â  Â  .catch(err => console.error("Failed to fetch employee stats", err))
Â  Â  Â  Â  Â  Â  .finally(() => setIsLoading(false));
Â  Â  }, []);

Â  Â  if (isLoading || !stats) return <Loader />;

Â  Â  const statCards = [
Â  Â  Â  Â  { title: 'Total Expenses', value: stats.total, icon: DollarSign, color: 'bg-gradient-to-br from-blue-500 to-blue-600' },
Â  Â  Â  Â  { title: 'Pending', value: stats.pending, icon: Clock, color: 'bg-gradient-to-br from-yellow-500 to-yellow-600' },
Â  Â  Â  Â  { title: 'Approved', value: stats.approved, icon: CheckCircle, color: 'bg-gradient-to-br from-green-500 to-green-600' },
Â  Â  Â  Â  { title: 'Rejected', value: stats.rejected, icon: XCircle, color: 'bg-gradient-to-br from-red-500 to-red-600' },
Â  Â  ];

Â  Â  return (
Â  Â  Â  Â  <div className="space-y-6 animate-fadeIn">
Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
Â  Â  Â  Â  Â  Â  Â  Â  {statCards.map((stat, index) => <StatCard key={index} {...stat} />)}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  );
};

const ManagerDashboard = () => {
Â  Â  const [approvals, setApprovals] = useState([]);
Â  Â  const [stats, setStats] = useState(null);
Â  Â  const [isLoading, setIsLoading] = useState(true);
Â  Â  const [modalState, setModalState] = useState({ isOpen: false, expense: null, decision: '' });

Â  Â  const fetchData = async () => {
Â  Â  Â  Â  setIsLoading(true);
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const [approvalsRes, statsRes] = await Promise.all([
Â  Â  Â  Â  Â  Â  Â  Â  expenseService.getPendingApprovals(),
Â  Â  Â  Â  Â  Â  Â  Â  dashboardService.getStats('manager')
Â  Â  Â  Â  Â  Â  ]);
Â  Â  Â  Â  Â  Â  setApprovals(approvalsRes.data);
Â  Â  Â  Â  Â  Â  setStats(statsRes.data);
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  Â  console.error("Failed to fetch manager data", error);
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  Â  setIsLoading(false);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  useEffect(() => {
Â  Â  Â  Â  fetchData();
Â  Â  }, []);

Â  Â  const handleOpenModal = (expense, decision) => {
Â  Â  Â  Â  setModalState({ isOpen: true, expense, decision });
Â  Â  };

Â  Â  const handleProcessExpense = async (expenseId, decision, comments) => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  await expenseService.processExpense(expenseId, decision, { comments });
Â  Â  Â  Â  Â  Â  setApprovals(prev => prev.filter(item => item.id !== expenseId)); // Update UI immediately
Â  Â  Â  Â  Â  Â  setModalState({ isOpen: false, expense: null, decision: '' }); // Close modal
Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.error("Failed to process expense", err);
Â  Â  Â  Â  }
Â  Â  };

Â  Â  if (isLoading || !stats) return <Loader />;

Â  Â  const statCards = [
Â  Â  Â  Â  { title: 'Pending Approvals', value: approvals.length, icon: Clock, color: 'bg-gradient-to-br from-yellow-500 to-yellow-600' },
Â  Â  Â  Â  { title: 'Approved Today', value: stats.approvedToday, icon: CheckCircle, color: 'bg-gradient-to-br from-green-500 to-green-600', trend: stats.approvalTrend },
Â  Â  Â  Â  { title: 'Team Total (Month)', value: `$${stats.teamMonthlyTotal}`, icon: DollarSign, color: 'bg-gradient-to-br from-blue-500 to-blue-600' },
Â  Â  ];

Â  Â  return (
Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  <ApprovalModal {...modalState} onClose={() => setModalState({ isOpen: false, expense: null, decision: '' })} onSubmit={handleProcessExpense} />
Â  Â  Â  Â  Â  Â  <div className="space-y-6 animate-fadeIn">
Â  Â  Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {statCards.map((stat, index) => <StatCard key={index} {...stat} />)}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  {/* ... Table for approvals ... */}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </>
Â  Â  );
};

const AdminDashboard = () => {
Â  Â  const [stats, setStats] = useState(null);
Â  Â  const [isLoading, setIsLoading] = useState(true);

Â  Â  useEffect(() => {
Â  Â  Â  Â  dashboardService.getStats('admin')
Â  Â  Â  Â  Â  Â  .then(response => setStats(response.data))
Â  Â  Â  Â  Â  Â  .catch(err => console.error("Failed to fetch admin stats", err))
Â  Â  Â  Â  Â  Â  .finally(() => setIsLoading(false));
Â  Â  }, []);

Â  Â  if (isLoading || !stats) return <Loader />;

Â  Â  const statCards = [
Â  Â  Â  Â  { title: 'Total Users', value: stats.totalUsers, icon: Users, color: 'bg-gradient-to-br from-purple-500 to-purple-600', trend: stats.userTrend },
Â  Â  Â  Â  { title: 'Total Pending', value: stats.totalPending, icon: Clock, color: 'bg-gradient-to-br from-yellow-500 to-yellow-600' },
Â  Â  Â  Â  { title: 'Company Monthly Total', value: `$${stats.companyMonthlyTotal}`, icon: DollarSign, color: 'bg-gradient-to-br from-blue-500 to-blue-600', trend: stats.monthlyTrend },
Â  Â  ];
Â  Â  
Â  Â  return (
Â  Â  Â  Â  <div className="space-y-6 animate-fadeIn">
Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
Â  Â  Â  Â  Â  Â  Â  Â  {statCards.map((stat, index) => <StatCard key={index} {...stat} />)}
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  );
};

// --- Main Dashboard Component ---

export default function DashboardPage() {
Â  Â  const { user } = useAuth();

Â  Â  const renderDashboardByRole = () => {
Â  Â  Â  Â  switch (user?.role) {
Â  Â  Â  Â  Â  Â  case 'Admin': return <AdminDashboard />;
Â  Â  Â  Â  Â  Â  case 'Manager': return <ManagerDashboard />;
Â  Â  Â  Â  Â  Â  case 'Employee': return <EmployeeDashboard />;
Â  Â  Â  Â  Â  Â  default: return <Loader />;
Â  Â  Â  Â  }
Â  Â  };

Â  Â  return (
Â  Â  Â  Â  <div className="space-y-6">
Â  Â  Â  Â  Â  Â  <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-xl shadow-lg p-6 text-white">
Â  Â  Â  Â  Â  Â  Â  Â  <h1 className="text-3xl font-bold mb-2">Welcome back, {user?.name}! ðŸ‘‹</h1>
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-blue-100">Here's what's happening with your expenses today.</p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  {renderDashboardByRole()}
Â  Â  Â  Â  </div>
Â  Â  );
}